{
  
    
        "post0": {
            "title": "Assignment 3",
            "content": "Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . data = pd.read_csv(&#39;finance.csv&#39;) data.head() . State Year Totals.Capital outlay Totals.Revenue Totals.Expenditure Totals.General expenditure Totals.General revenue Totals.Insurance trust revenue Totals.Intergovernmental Totals.License tax ... Details.Welfare.Welfare Institution Total Expenditure Details.Natural Resources.Parks.Parks Total Expenditure Details.Transportation.Highways.Highways Total Expenditure Totals. Debt at end of fiscal year Details.Insurance benefits and repayments Details.Interest on debt Details.Interest on general debt Details.Miscellaneous general revenue Details.Other taxes Details.Police protection . 0 ALABAMA | 1992 | 664748 | 10536166 | 9650515 | 8788293 | 8910315 | 1473217 | 2737180 | 395202 | ... | 1853436 | 9728 | 694874 | 4128724 | 724852 | 280179 | 280179 | 607453 | 205227 | 77789 | . 1 ALABAMA | 1993 | 781952 | 11389335 | 10242374 | 9339796 | 9688246 | 1570768 | 2965310 | 377723 | ... | 2016935 | 11031 | 856228 | 4170084 | 761582 | 267648 | 267648 | 599988 | 224878 | 78320 | . 2 ALABAMA | 1994 | 767100 | 11599362 | 10815221 | 9922352 | 10014415 | 1454982 | 3077084 | 386771 | ... | 2167799 | 12053 | 883852 | 3853804 | 762811 | 250642 | 250642 | 643807 | 234592 | 86839 | . 3 ALABAMA | 1995 | 808001 | 12279726 | 11541881 | 10489513 | 10582838 | 1566923 | 3240417 | 480698 | ... | 2291264 | 10645 | 924411 | 3758726 | 912649 | 193752 | 193752 | 643469 | 232783 | 83482 | . 4 ALABAMA | 1996 | 760751 | 12741148 | 12126587 | 10991713 | 10894396 | 1710360 | 3347019 | 422841 | ... | 2325418 | 7788 | 881381 | 3645292 | 987710 | 216842 | 216842 | 649073 | 265426 | 86936 | . 5 rows × 31 columns . df = pd.read_csv(&#39;finance.csv&#39;) print(&quot;Number of rows &quot;, len(df.index)) row_count, column_count = df.shape print(&quot;Number of columns &quot;, column_count) . Number of rows 1051 Number of columns 31 . for col in data.columns: print(col) . State Year Totals.Capital outlay Totals.Revenue Totals.Expenditure Totals.General expenditure Totals.General revenue Totals.Insurance trust revenue Totals.Intergovernmental Totals.License tax Totals.Selective sales tax Totals.Tax Details.Correction.Correction Total Details.Education.Education Total Details.Financial Aid.Assistance and Subsidies Details.Financial Aid.Cash and Securities Total Details.Health.Health Total Expenditure Details.Intergovernmental.Intergovernmental Expenditure Details.Intergovernmental.Intergovernmental to Combined and Unallocable Details.Natural Resources.Natural Resources Construction Details.Utilities.Utilities Current Operation Details.Welfare.Welfare Institution Total Expenditure Details.Natural Resources.Parks.Parks Total Expenditure Details.Transportation.Highways.Highways Total Expenditure Totals. Debt at end of fiscal year Details.Insurance benefits and repayments Details.Interest on debt Details.Interest on general debt Details.Miscellaneous general revenue Details.Other taxes Details.Police protection . df = pd.read_csv(&#39;finance.csv&#39;, nrows=31) for name, dtype in df.dtypes.iteritems(): print(name, dtype) . State object Year int64 Totals.Capital outlay int64 Totals.Revenue int64 Totals.Expenditure int64 Totals.General expenditure int64 Totals.General revenue int64 Totals.Insurance trust revenue int64 Totals.Intergovernmental int64 Totals.License tax int64 Totals.Selective sales tax int64 Totals.Tax int64 Details.Correction.Correction Total int64 Details.Education.Education Total int64 Details.Financial Aid.Assistance and Subsidies int64 Details.Financial Aid.Cash and Securities Total int64 Details.Health.Health Total Expenditure int64 Details.Intergovernmental.Intergovernmental Expenditure int64 Details.Intergovernmental.Intergovernmental to Combined and Unallocable int64 Details.Natural Resources.Natural Resources Construction int64 Details.Utilities.Utilities Current Operation int64 Details.Welfare.Welfare Institution Total Expenditure int64 Details.Natural Resources.Parks.Parks Total Expenditure int64 Details.Transportation.Highways.Highways Total Expenditure int64 Totals. Debt at end of fiscal year int64 Details.Insurance benefits and repayments int64 Details.Interest on debt int64 Details.Interest on general debt int64 Details.Miscellaneous general revenue int64 Details.Other taxes int64 Details.Police protection int64 . df_first2 = pd.read_csv(&#39;finance.csv&#39;, nrows=2) print(df_first2) . State Year Totals.Capital outlay Totals.Revenue Totals.Expenditure 0 ALABAMA 1992 664748 10536166 9650515 1 ALABAMA 1993 781952 11389335 10242374 Totals.General expenditure Totals.General revenue 0 8788293 8910315 1 9339796 9688246 Totals.Insurance trust revenue Totals.Intergovernmental 0 1473217 2737180 1 1570768 2965310 Totals.License tax ... 0 395202 ... 1 377723 ... Details.Welfare.Welfare Institution Total Expenditure 0 1853436 1 2016935 Details.Natural Resources.Parks.Parks Total Expenditure 0 9728 1 11031 Details.Transportation.Highways.Highways Total Expenditure 0 694874 1 856228 Totals. Debt at end of fiscal year 0 4128724 1 4170084 Details.Insurance benefits and repayments Details.Interest on debt 0 724852 280179 1 761582 267648 Details.Interest on general debt Details.Miscellaneous general revenue 0 280179 607453 1 267648 599988 Details.Other taxes Details.Police protection 0 205227 77789 1 224878 78320 [2 rows x 31 columns] . reviews_df = pd.read_csv(&quot;finance.csv&quot;, skiprows=range(1,1049), nrows=2) print(reviews_df) . State Year Totals.Capital outlay Totals.Revenue Totals.Expenditure 0 WYOMING 2017 475405 7000634 6445250 1 WYOMING 2018 513325 7652548 6308802 Totals.General expenditure Totals.General revenue 0 5533166 5552848 1 5393900 5602117 Totals.Insurance trust revenue Totals.Intergovernmental 0 1336124 2592055 1 1931521 2363993 Totals.License tax ... 0 161973 ... 1 187522 ... Details.Welfare.Welfare Institution Total Expenditure 0 839126 1 853578 Details.Natural Resources.Parks.Parks Total Expenditure 0 22893 1 22071 Details.Transportation.Highways.Highways Total Expenditure 0 478504 1 504837 Totals. Debt at end of fiscal year 0 769721 1 832440 Details.Insurance benefits and repayments Details.Interest on debt 0 815448 21942 1 812871 23693 Details.Interest on general debt Details.Miscellaneous general revenue 0 21942 1084334 1 23693 1150389 Details.Other taxes Details.Police protection 0 724988 38874 1 787082 39607 [2 rows x 31 columns] . df.describe() . Year Totals.Capital outlay Totals.Revenue Totals.Expenditure Totals.General expenditure Totals.General revenue Totals.Insurance trust revenue Totals.Intergovernmental Totals.License tax Totals.Selective sales tax ... Details.Welfare.Welfare Institution Total Expenditure Details.Natural Resources.Parks.Parks Total Expenditure Details.Transportation.Highways.Highways Total Expenditure Totals. Debt at end of fiscal year Details.Insurance benefits and repayments Details.Interest on debt Details.Interest on general debt Details.Miscellaneous general revenue Details.Other taxes Details.Police protection . count 31.000000 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 31.000000 | 3.100000e+01 | ... | 3.100000e+01 | 31.000000 | 3.100000e+01 | 3.100000e+01 | 3.100000e+01 | 31.000000 | 31.000000 | 3.100000e+01 | 3.100000e+01 | 31.000000 | . mean 2002.032258 | 1.118872e+06 | 1.683817e+07 | 1.612011e+07 | 1.441705e+07 | 1.425084e+07 | 2.436086e+06 | 4.765002e+06 | 335696.870968 | 1.292052e+06 | ... | 3.553690e+06 | 17244.322581 | 1.038395e+06 | 5.618274e+06 | 1.548162e+06 | 296404.064516 | 290999.193548 | 1.883252e+06 | 5.556974e+05 | 102376.612903 | . std 8.708172 | 6.763169e+05 | 9.652711e+06 | 1.043335e+07 | 9.144599e+06 | 7.938721e+06 | 1.901563e+06 | 3.591183e+06 | 187245.693137 | 9.489039e+05 | ... | 2.853881e+06 | 5952.768848 | 4.512075e+05 | 2.296225e+06 | 1.204766e+06 | 77718.915777 | 76501.019602 | 1.408712e+06 | 3.160658e+05 | 42393.065881 | . min 1992.000000 | 3.823100e+05 | 6.185917e+06 | 5.254925e+06 | 4.788127e+06 | 5.279241e+06 | -1.204495e+06 | 7.731060e+05 | 62951.000000 | 9.601400e+04 | ... | 5.076550e+05 | 7788.000000 | 5.471620e+05 | 3.176601e+06 | 3.905510e+05 | 193752.000000 | 193752.000000 | 5.999880e+05 | 2.052270e+05 | 52292.000000 | . 25% 1995.500000 | 5.784230e+05 | 8.811841e+06 | 6.375856e+06 | 5.772058e+06 | 7.391650e+06 | 1.287540e+06 | 1.212172e+06 | 88264.500000 | 1.333205e+05 | ... | 8.524325e+05 | 12641.000000 | 6.313950e+05 | 3.826756e+06 | 5.612740e+05 | 241608.000000 | 231553.000000 | 7.958500e+05 | 3.310110e+05 | 62250.500000 | . 50% 1999.000000 | 7.819520e+05 | 1.400788e+07 | 1.294487e+07 | 1.166884e+07 | 1.148701e+07 | 1.710360e+06 | 3.553541e+06 | 397429.000000 | 1.360764e+06 | ... | 2.537627e+06 | 16039.000000 | 8.838520e+05 | 4.467074e+06 | 1.107068e+06 | 267648.000000 | 267537.000000 | 1.195567e+06 | 4.745710e+05 | 93163.000000 | . 75% 2008.000000 | 1.746949e+06 | 2.478545e+07 | 2.517884e+07 | 2.235584e+07 | 2.048825e+07 | 3.184025e+06 | 8.051386e+06 | 485564.000000 | 2.067350e+06 | ... | 5.945845e+06 | 22438.000000 | 1.361966e+06 | 7.530947e+06 | 2.540322e+06 | 353989.000000 | 353989.000000 | 2.805088e+06 | 7.273975e+05 | 126842.500000 | . max 2019.000000 | 2.454561e+06 | 3.548826e+07 | 3.442032e+07 | 3.062128e+07 | 3.019748e+07 | 6.360069e+06 | 1.127901e+07 | 575510.000000 | 2.747974e+06 | ... | 8.448333e+06 | 31113.000000 | 2.017229e+06 | 1.009789e+07 | 3.566937e+06 | 472114.000000 | 451887.000000 | 5.401677e+06 | 1.220922e+06 | 200242.000000 | . 8 rows × 30 columns . df = pd.read_csv(&quot;finance.csv&quot;, usecols = [&#39;Year&#39;]) print(df) . Year 0 1992 1 1993 2 1994 3 1995 4 1996 ... ... 1046 2015 1047 2016 1048 2017 1049 2018 1050 2019 [1051 rows x 1 columns] . import matplotlib.pyplot as plt df = pd.read_csv(&#39;finance.csv&#39;) pd.set_option(&quot;display.max.columns&quot;, None) %matplotlib inline df.plot(x=&quot;Year&quot;, y=[&quot;Totals.Revenue&quot;]) plt.show() . data = pd.read_csv(&#39;finance.csv&#39;, index_col=&#39;Totals.Revenue&#39;) print(data.iloc[0:10, 2]) . Totals.Revenue 10536166 664748 11389335 781952 11599362 767100 12279726 808001 12741148 760751 14007883 770809 14843951 755486 15501093 851302 16856646 1136551 17859899 1214496 Name: Totals.Capital outlay, dtype: int64 . # as well as the matching 10 elements of a different column that has interesting text data = pd.read_csv(&#39;finance.csv&#39;, index_col=&#39;Totals.Revenue&#39;) print(data.iloc[0:10, 2]) data = pd.read_csv(&#39;finance.csv&#39;, index_col=&#39;Year&#39;) print(data.iloc[0:10, 2]) . Totals.Revenue 10536166 664748 11389335 781952 11599362 767100 12279726 808001 12741148 760751 14007883 770809 14843951 755486 15501093 851302 16856646 1136551 17859899 1214496 Name: Totals.Capital outlay, dtype: int64 Year 1992 10536166 1993 11389335 1994 11599362 1995 12279726 1996 12741148 1997 14007883 1998 14843951 1999 15501093 2000 16856646 2001 17859899 Name: Totals.Revenue, dtype: int64 . # and make a bar plot with the text values horizontally and the numeric values as the bar heights X = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] Y = [10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899] plt.bar(X, Y, color=&#39;b&#39;) plt.title(&quot;Revenue of Alabama from 1992 to 2001&quot;) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Dollars&quot;) . Text(0, 0.5, &#39;Dollars ( in thousands&#39;) . X = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] Y = [10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899] plt.barh(X, Y, color=&#39;b&#39;) plt.title(&quot;Revenue of Alabama from 1992 to 2001&quot;) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Dollars&quot;) plt.show() . # and change at least two aesthetic elements (colors, labels, titles, ...) X = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] Y = [10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899] plt.barh(X, Y, color=&#39;g&#39;) plt.title(&quot;Revenue of Alabama from 1992 to 2001&quot;) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Dollars (in thousands)&quot;) . Text(0, 0.5, &#39;Dollars (in thousands)&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . year = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] rev = [10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899] df = pd.DataFrame({&#39;length&#39;: [10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899], &#39;width&#39;: [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001]}) plt.scatter(x=[1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001], y=[10536166, 11389335, 11599362, 12279726, 12741148, 14007883, 14843951,15501093, 16856646, 17859899], c=&#39;DarkBlue&#39;) . &lt;matplotlib.collections.PathCollection at 0x7fb94cf3afa0&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . Revenue_of_California_Through_Time = [101998668, 108901718,115227902, 118303386, 123342274, 131099489, 144984973, 154016720, 172480675, 176080892, 151245388, 195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413] Revenue_of_California_Through_Time_1991_2001 = [195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413] plt.scatter(x=[1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001], y= [195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413], c=&#39;DarkBlue&#39;) . &lt;matplotlib.collections.PathCollection at 0x7fb94c98fca0&gt; . X = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] Y = [195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413] plt.barh(X, Y, color=&#39;g&#39;) plt.title(&quot;Revenue of California from 1992 to 2001&quot;) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Dollars (in thousands)&quot;) . Text(0, 0.5, &#39;Dollars (in thousands)&#39;) . X = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001] Y = [c] s = pd.Series([195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413]) ax = s.plot.kde() . s = pd.Series([195545076, 229698348, 242002515, 312974848, 344302107, 317407713, 323312514, 404602274, 430760445, 436479413]) s.plot.line() . &lt;AxesSubplot:&gt; .",
            "url": "https://jackwitherspoon.github.io/Week9Video/2022/03/13/Assignment03.html",
            "relUrl": "/2022/03/13/Assignment03.html",
            "date": " • Mar 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jackwitherspoon.github.io/Week9Video/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jackwitherspoon.github.io/Week9Video/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jackwitherspoon.github.io/Week9Video/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jackwitherspoon.github.io/Week9Video/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}